package japsa.seq;

import htsjdk.samtools.Cigar;
import htsjdk.samtools.TextCigarCodec;
import japsa.util.JapsaException;

/*
 * Represent a PAF record generated by minimap2: https://lh3.github.io/minimap2/minimap2.html
 * Col	Type	Description
 * 1	string	Query sequence name
 * 2	int	Query sequence length
 * 3	int	Query start coordinate (0-based)
 * 4	int	Query end coordinate (0-based)
 * 5	char	‘+’ if query/target on the same strand; ‘-’ if opposite
 * 6	string	Target sequence name
 * 7	int	Target sequence length
 * 8	int	Target start coordinate on the original strand
 * 9	int	Target end coordinate on the original strand
 * 10	int	Number of matching bases in the mapping
 * 11	int	Number bases, including gaps, in the mapping
 * 12	int	Mapping quality (0-255 with 255 for missing)
 */
public class PAFRecord {
	public String qname, tname;
	public int qlen, tlen;
	public int qstart, qend, tstart, tend;
	public boolean strand;
	public int qual, score;
	Cigar cigar=null;
	
	public PAFRecord(String qname, int qlen, int qstart, int qend, 
					boolean strand, 
					String tname, int tlen, int tstart, int tend, 
					int score, int quality ) {
		this.qname=qname; this.tname=tname;
		this.qlen=qlen;	this.qstart=qstart;	this.qend=qend;
		this.tlen=tlen; this.tstart=tstart; this.tend=tend;
		this.qual=quality; this.score=score;
		this.strand=strand;
	}
	//construct a record from a line in .paf file
	public PAFRecord(String line) throws JapsaException {
		String[] toks= line.split("\t");
		if(toks.length < 12)
			throw new JapsaException("Error reading PAF line: " + toks.length + " < 12" + "\n" + line);
		qname=toks[0];
		tname=toks[5];
		
		strand=("+".equals(toks[4])?true:false);

		qlen=Integer.parseInt(toks[1]);
		tlen=Integer.parseInt(toks[6]);
		//convert coordinates from 0-based to 1-based
		qstart=Integer.parseInt(toks[2])+1;
		qend=Integer.parseInt(toks[3])+1;
		
		if(!strand) {
			int tmp=qstart;
			qstart=qend;
			qend=tmp;
		}
		
		tstart=Integer.parseInt(toks[7])+1;
		tend=Integer.parseInt(toks[8])+1;
		
		qual=Integer.parseInt(toks[11]);
		score=Integer.parseInt(toks[9]);
		
		//Looking for cigar tag 
		for(int i=12; i< toks.length; i++) {
			String tags[]=toks[i].split(":");
			if(tags[0].equalsIgnoreCase("cg"))
				cigar=TextCigarCodec.decode(tags[1]);
			else
				continue;
		}
	}
	
	public Cigar getCigar() {return cigar;}
	
}
